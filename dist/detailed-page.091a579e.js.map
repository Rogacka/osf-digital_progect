{"mappings":"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","sources":["src/js/detailed.js"],"sourcesContent":["const detailedPageText = document.getElementById(\"visible-text\");\n\nconst visibleDetailedPageText =\n  detailedPageText.innerText.slice(0, 100) + \"...\";\nconst hiddenDetailedPageText = detailedPageText.innerText.slice(100);\n\ndetailedPageText.innerHTML = visibleDetailedPageText;\n\nconst readMoreButton = document.querySelector(\".detailed-page__read-more\");\nconst readLessButton = document.querySelector(\".detailed-page__read-less\");\n\n/**\n * Toggles the display of the detailed page text between a truncated version and the full text\n * @param {HTMLElement} detailedPageText - the element containing the detailed page text\n * @param {HTMLElement} readMoreButton - the element containing the read more button\n * @param {HTMLElement} readLessButton - the element containing the read less button\n */\n[readMoreButton, readLessButton].forEach((button) => {\n  button.addEventListener(\"click\", () => {\n    if (detailedPageText.innerHTML === visibleDetailedPageText) {\n      detailedPageText.innerHTML =\n        visibleDetailedPageText + hiddenDetailedPageText;\n      readMoreButton.style.display = \"none\";\n      readLessButton.style.display = \"block\";\n    } else {\n      detailedPageText.innerHTML = visibleDetailedPageText;\n      readMoreButton.style.display = \"block\";\n      readLessButton.style.display = \"none\";\n    }\n  });\n});\n\nconst detailedImageOverlay = document.querySelectorAll(\".card-img-overlay\");\nconst imageOverlay = [...detailedImageOverlay];\n\nconst detailedPageContainer = document.querySelectorAll(\n  \".detailed-page__container\"\n);\nconst pageContainers = [...detailedPageContainer];\n\nconst detailedPageImage = document.querySelectorAll(\".detailed-page__image\");\nconst pageImages = [...detailedPageImage];\n\n/**\n * Adds an event listener to each item in the imageOverlay array to toggle the active-img class\n * and the container-active class on the parent item, and toggle the hide-img class on the\n * corresponding pageImages item.\n * @param {Array} imageOverlay - array of DOM elements\n * @param {Array} pageContainers - array of DOM elements\n * @param {Array} pageImages - array of DOM elements\n */\nimageOverlay.forEach((item, index) => {\n  item.addEventListener(\"click\", () => {\n    pageContainers.forEach((element) =>\n      element.classList.remove(\"container-active\")\n    );\n    imageOverlay.forEach((element) => element.classList.remove(\"active-img\"));\n    pageImages.forEach((element) => element.classList.add(\"hide-img\"));\n\n    item.classList.toggle(\"active-img\");\n    const parentItem = item.closest(\".detailed-page__container\");\n    parentItem.classList.toggle(\"container-active\");\n    pageImages[index].classList.toggle(\"hide-img\");\n  });\n});\n\nconst resizeButton = document.querySelector(\".detailed-page__resize-container\");\nconst biggestContainer = document.querySelector(\".biggest-container\");\n/**\n * Resizes the biggest container on the page when the resize button is clicked\n * @param {HTMLElement} resizeButton - The resize button element\n * @param {HTMLElement} biggestContainer - The biggest container element\n * @param {Array} pageImages - An array of the page images\n */\nresizeButton.addEventListener(\"click\", () => {\n  pageImages.forEach((element) => {\n    if (!element.classList.contains(\"hide-img\")) {\n      biggestContainer.classList.toggle(\"biggest-container__hide\");\n      biggestContainer.firstElementChild.style.backgroundImage = `url(${element.getAttribute(\n        \"src\"\n      )})`;\n    }\n  });\n});\n\n/**\n * Adds an event listener to the biggestContainer element to toggle the class 'biggest-container__hide'\n */\nbiggestContainer.addEventListener(\"click\", () => {\n  biggestContainer.classList.toggle(\"biggest-container__hide\");\n});\n\nconst btnDecrease = document.querySelector(\".btn-decrease\");\nconst btnIncrease = document.querySelector(\".btn-increase\");\nconst inputValue = document.querySelector(\".input-count\");\n\n/**\n * Decreases the value of the input field when the decrease button is clicked\n * @param {Event} btnDecrease - the decrease button\n * @param {Element} inputValue - the input field element\n */\nbtnDecrease.addEventListener(\"click\", () => {\n  inputValue.value--;\n  if (inputValue.value < 1) {\n    inputValue.value = 1;\n  }\n});\n\n/**\n * Increases the value of the input field when the increase button is clicked\n * @param {HTMLElement} btnIncrease - The increase button element\n * @param {HTMLElement} inputValue - The input field element\n */\n\nbtnIncrease.addEventListener(\"click\", () => {\n  inputValue.value++;\n});\n\n/**\n * Adds event listeners to the inputValue element\n * @param {Array} eventList - list of events to add listeners to\n * @param {Object} inputValue - the target element to add event listeners to\n * @returns {undefined}\n */\nconst eventList = [\"keydown\", \"blur\", \"keyup\"];\nfor (events of eventList) {\n  inputValue.addEventListener(events, function (event) {\n    if (!event.key.match(/\\d/) && event.key !== \"Backspace\") {\n      event.preventDefault();\n    }\n    if (\n      (event.target.value === \"\" || event.target.value === \"0\") &&\n      event.key === \"Enter\"\n    ) {\n      event.target.value = \"1\";\n    }\n  });\n}\n\n/**\n * Adds product to local storage and updates the shopping cart icon\n * @param {HTMLElement} addToCart - the add to cart button\n * @param {Object} product - product object containing name, image, price, and count\n * @param {Function} addToLocalStorage - function to add product to local storage\n * @param {String} shopping - key for local storage\n * @param {Function} addNumber - function to update the shopping cart icon\n * @param {String} shoppingContainerShow - key for shopping cart icon\n */\nconst addToCart = document.querySelector(\".btn-success\");\n\naddToCart.addEventListener(\"click\", () => {\n  const product = {\n    name: document.getElementById(\"product-name\").innerText,\n    image: document.getElementById(\"main-img\").getAttribute(\"src\"),\n    price: document.querySelector(\".detailed-page__price\").textContent,\n    count: parseInt(inputValue.value),\n  };\n  addToLocalStorage(\"shopping\", product);\n  addNumber(\"shopping\", shoppingContainerShow);\n});\n\n/**\n * Prints the current page\n */\nfunction printPage() {\n  detailedPageText.innerHTML = visibleDetailedPageText + hiddenDetailedPageText;\n  window.print();\n  detailedPageText.innerHTML = visibleDetailedPageText;\n}\n"],"names":[],"version":3,"file":"detailed-page.091a579e.js.map","sourceRoot":"/__parcel_source_root/"}